<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://qiyunkong.github.io</id>
    <title>技术飞</title>
    <updated>2021-05-11T15:08:00.454Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://qiyunkong.github.io"/>
    <link rel="self" href="http://qiyunkong.github.io/atom.xml"/>
    <subtitle>IT，生活，笔记，开发，学习</subtitle>
    <logo>http://qiyunkong.github.io/images/avatar.png</logo>
    <icon>http://qiyunkong.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 技术飞</rights>
    <entry>
        <title type="html"><![CDATA[毕业设计之胡思乱想的宏与微的设计思想（一）]]></title>
        <id>http://qiyunkong.github.io/post/bishehs1/</id>
        <link href="http://qiyunkong.github.io/post/bishehs1/">
        </link>
        <updated>2021-05-11T00:26:47.000Z</updated>
        <summary type="html"><![CDATA[<p>没事，看两下，说不定你就是下一个被入坑的人，喜欢给别人胡扯就看，喜欢看笑话就看，了解编程的魅力和IT的世界</p>
]]></summary>
        <content type="html"><![CDATA[<p>没事，看两下，说不定你就是下一个被入坑的人，喜欢给别人胡扯就看，喜欢看笑话就看，了解编程的魅力和IT的世界</p>
<!-- more -->
<p>可能有的人对宏任务与微任务有些了解，而我现在胡乱提出的宏与微的设计与它们并没有关系，宏与微的设计是抽象的概念，是用于搭建项目工程的一个方向，或者是一种架构设计方向，现在的开发会把大的工程的进行拆解，进行工程化。就拿我们知道那架构进行讲解，初学者一般都会知道三层架构，那么三层架构指那三层我们就不指出了，因为三层架构是属于分层架构的一个实例，可能初学者就会一直思考三层架构是哪个三个，都代表什么意思，这是一很大的误区，架构本就是一种思想，可能有些学计算机的学生可能一直以为三层架构，分三层，表现层（presentation）、业务层（business）、数据层（persistence）、以后的项目架构牢牢锁在别人的实例和思想中，一直没有很大工程设计思想，我先引入一下现在常见的架构的思想，在开始我的表演，以下说法都是个人理解，如果有偏见，那就是你对，别杠。</p>
<h2 id="一-分层架构">一、分层架构</h2>
<p>分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。</p>
<p>这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。</p>
<p>虽然没有明确约定，软件一定要分成多少层，但是四层的结构最常见。</p>
<figure data-type="image" tabindex="1"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090302.png" alt="img" loading="lazy"></figure>
<blockquote>
<ul>
<li>表现层（presentation）：用户界面，负责视觉和用户互动</li>
<li>业务层（business）：实现业务逻辑</li>
<li>持久层（persistence）：提供数据，SQL 语句就放在这一层</li>
<li>数据库（database） ：保存数据</li>
</ul>
</blockquote>
<p>有的软件在逻辑层和持久层之间，加了一个服务层（service），提供不同业务逻辑需要的一些通用接口。</p>
<p>用户的请求将依次通过这四层的处理，不能跳过其中任何一层。</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090303.png" alt="img" loading="lazy"></figure>
<p>优点</p>
<blockquote>
<ul>
<li>结构简单，容易理解和开发</li>
<li>不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构</li>
<li>每一层都可以独立测试，其他层的接口通过模拟解决</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时</li>
<li>部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布</li>
<li>软件升级时，可能需要整个服务暂停</li>
<li>扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难</li>
</ul>
</blockquote>
<h2 id="二-事件驱动架构">二、事件驱动架构</h2>
<p>事件（event）是状态发生变化时，软件发出的通知。</p>
<p>事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。</p>
<figure data-type="image" tabindex="3"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090304.png" alt="img" loading="lazy"></figure>
<blockquote>
<ul>
<li>事件队列（event queue）：接收事件的入口</li>
<li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</li>
<li>事件通道（event channel）：分发器与处理器之间的联系渠道</li>
<li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</li>
</ul>
</blockquote>
<p>对于简单的项目，事件队列、分发器和事件通道，可以合为一体，整个软件就分成事件代理和事件处理器两部分。</p>
<figure data-type="image" tabindex="4"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090305.png" alt="img" loading="lazy"></figure>
<p>优点</p>
<blockquote>
<ul>
<li>分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好</li>
<li>适用性广，各种类型的项目都可以用</li>
<li>性能较好，因为事件的异步本质，软件不易产生堵塞</li>
<li>事件处理器可以独立地加载和卸载，容易部署</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂</li>
<li>难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚</li>
<li>分布式和异步特性导致这个架构较难测试</li>
</ul>
</blockquote>
<h2 id="三-微核架构">三、微核架构</h2>
<p>微核架构（microkernel architecture）又称为&quot;插件架构&quot;（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。</p>
<p>内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。</p>
<figure data-type="image" tabindex="5"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090306.png" alt="img" loading="lazy"></figure>
<p>优点</p>
<blockquote>
<ul>
<li>良好的功能延伸性（extensibility），需要什么功能，开发一个插件即可</li>
<li>功能之间是隔离的，插件可以独立的加载和卸载，使得它比较容易部署，</li>
<li>可定制性高，适应不同的开发需要</li>
<li>可以渐进式地开发，逐步增加功能</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>扩展性（scalability）差，内核通常是一个独立单元，不容易做成分布式</li>
<li>开发难度相对较高，因为涉及到插件与内核的通信，以及内部的插件登记机制</li>
</ul>
</blockquote>
<h2 id="四-微服务架构">四、微服务架构</h2>
<p>微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。</p>
<p>每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090307.png" alt="img" loading="lazy"></figure>
<p>微服务架构分成三种实现模式。</p>
<blockquote>
<ul>
<li>RESTful API 模式：服务通过 API 提供，云服务就属于这一类</li>
<li>RESTful 应用模式：服务通过传统的网络协议或者应用协议提供，背后通常是一个多功能的应用程序，常见于企业内部</li>
<li>集中消息模式：采用消息代理（message broker），可以实现消息队列、负载均衡、统一日志和异常处理，缺点是会出现单点失败，消息代理可能要做成集群</li>
</ul>
</blockquote>
<p>优点</p>
<blockquote>
<ul>
<li>扩展性好，各个服务之间低耦合</li>
<li>容易部署，软件从单一可部署单元，被拆成了多个服务，每个服务都是可部署单元</li>
<li>容易开发，每个组件都可以进行持续集成式的开发，可以做到实时部署，不间断地升级</li>
<li>易于测试，可以单独测试每一个服务</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>由于强调互相独立和低耦合，服务可能会拆分得很细。这导致系统依赖大量的微服务，变得很凌乱和笨重，性能也会不佳。</li>
<li>一旦服务之间需要通信（即一个服务要用到另一个服务），整个架构就会变得复杂。典型的例子就是一些通用的 Utility 类，一种解决方案是把它们拷贝到每一个服务中去，用冗余换取架构的简单性。</li>
<li>分布式的本质使得这种架构很难实现原子性操作，交易回滚会比较困难。</li>
</ul>
</blockquote>
<h2 id="五-云架构">五、云架构</h2>
<p>云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。</p>
<p>它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。</p>
<p>这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。</p>
<blockquote>
<ul>
<li>处理单元：实现业务逻辑</li>
<li>虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。</li>
</ul>
</blockquote>
<figure data-type="image" tabindex="7"><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016090311.png" alt="img" loading="lazy"></figure>
<p>虚拟中间件又包含四个组件。</p>
<blockquote>
<ul>
<li><strong>消息中间件</strong>（Messaging Grid）：管理用户请求和session，当一个请求进来以后，决定分配给哪一个处理单元。</li>
<li><strong>数据中间件</strong>（Data Grid）：将数据复制到每一个处理单元，即数据同步。保证某个处理单元都得到同样的数据。</li>
<li><strong>处理中间件</strong>（Processing Grid）：可选，如果一个请求涉及不同类型的处理单元，该中间件负责协调处理单元</li>
<li><strong>部署中间件</strong>（Deployment Manager）：负责处理单元的启动和关闭，监控负载和响应时间，当负载增加，就新启动处理单元，负载减少，就关闭处理单元。</li>
</ul>
</blockquote>
<p>优点</p>
<blockquote>
<ul>
<li>高负载，高扩展性</li>
<li>动态部署</li>
</ul>
</blockquote>
<p>缺点</p>
<blockquote>
<ul>
<li>实现复杂，成本较高</li>
<li>主要适合网站类应用，不合适大量数据吞吐的大型数据库应用</li>
<li>较难测试</li>
</ul>
</blockquote>
<h2 id="六-开始我的表演">六、开始我的表演</h2>
<p>​	毕业设计每天都构思如何搭建工程结构和编写代码规范，如：代码结构，代码规范，目录结构，服务结构，关系结构等，尤其是都知道后端的规范和结构是相当重要，因为它是数据源走向必经之路，也可以理解是水的管道，就按照这个水是数据源，开发者是管道师傅，这个列子继续来认知我的宏与微的设计，我先提出一个问题，水质量与管道的设计到底哪个更加重要，有扩展思维的小伙伴，可以自己先思考一下，还有我一开始说道的大的工程项目一个会拆解，那么什么时候才知道是不可在分的原子，，水肯定会有一个开始的地方，一般会叫做水源，水的方向是由管道决定的，其实就是在说管道的设计，往往这个时候也要引入一个概念就是接口，初学者可以理解为水源是在水库里存放，与管道拼接的桥梁是接口。水不一定是干净，反过来说数据也不是全部有用的，这个时候决定水质量是接口，那水最终走的目的地是要管道来进行控制的，如果想把这里设计好需要了解设计模式，上面说到的水，管道，接口都是实例的对象，它们本身的概念是抽象的，并不是用实例作为概念。就拿数据源在举一个例子，往往我们想到数据库，数据库通常是用表的结构进行数据的存储，学过数据结构的小伙伴也知道存储数据结构的形式有好多，如：树，表，图，集合，数据库的可视化界面只是更好那你浏览数据与理解，实现的结构是又自己所决定。下面是我的个人理解：视图会让你认为数据库中数据的关系是二维，不一定，有可能，也可以是三维的，说不定更可能可以是四维的，因为现在程序很多有了生命周期，代码版本控制，例如git,svn。四维的设计是个人的看法，具体是否能设计出来，现在无法验证，只是胡扯一下，但是我还是要强调的时现在编程的壮大，未来的IT是真无可限量，如果能设计四维的数据模型，个人认为人类的记忆说不定可以能够存放，但是四维数据源那又怎么进行展示？，现在还没有想到怎么胡扯。</p>
<p>​	其实我个提出的&quot;宏与微的设计&quot;就是一个方向，微是方向的起点，宏是方向的终点，而微趋向宏的方式与走向就是“宏与的设计”，上面说道：“那么什么时候才知道是不可在分的原子”这个问题，就是当拆解到终点即可，也可以说宏的实现成功。</p>
<p>​	你的认知是根据别人的认知而认知，还是你的认知是根据别人的认知而改变认知，这个是我要说的宏与微的设计。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[信息与信息技术]]></title>
        <id>http://qiyunkong.github.io/post/xin-xi-yu-xin-xi-ji-zhu/</id>
        <link href="http://qiyunkong.github.io/post/xin-xi-yu-xin-xi-ji-zhu/">
        </link>
        <updated>2020-12-22T01:35:07.000Z</updated>
        <summary type="html"><![CDATA[<p>信息技术（Information Technology，缩写IT），是主要用于管理和处理信息所采用的各种技术的总称。它主要是应用计算机科学和通信技术来设计、开发、安装和实施信息系统及应用软件。它也常被称为信息和通信技术（Information and Communications Technology, ICT）。主要包括传感技术、计算机与智能技术、通信技术和控制技术</p>
]]></summary>
        <content type="html"><![CDATA[<p>信息技术（Information Technology，缩写IT），是主要用于管理和处理信息所采用的各种技术的总称。它主要是应用计算机科学和通信技术来设计、开发、安装和实施信息系统及应用软件。它也常被称为信息和通信技术（Information and Communications Technology, ICT）。主要包括传感技术、计算机与智能技术、通信技术和控制技术</p>
<!-- more -->
<h2 id="信息information是什么">信息(information)是什么?</h2>
<p>信息有多种多样的含义,至今并没有统一的定义<br>
日常生活中比较笼统和模糊的理解是:<br>
■语言、文字、图画、照片等所表达的内容<br>
■读书、听课、交谈等所学习和了解的知识<br>
■为了做判断、订计划或解决问题等所需要的数据和资料口比较正式也比较抽象一些的描述是:<br>
信息是事物运动状态和状态变化的方式<br>
信息就是信息，它不是物质也不是能量.信息与物质、能7/8是客观世界的三大构成要素。</p>
<h2 id="信息有哪些性质">信息有哪些性质?</h2>
<p>●普遍性:凡有事物的地方，就必然存在信息，信息广泛存在<br>
●动态性:事物是在不断运动变化之中的，信息也必然随之而改变时效性:由于信息的动态性，信息的使用价值会随着时间而衰减<br>
●多样性:语言、文字、声音、图片等(通称为信息的载体或媒体)都是信息的表现形式<br>
●可传递性:信息可通过媒体在人-人，人-物，物-物之间传递，信息传递才能发扫信息的作用<br>
●可共享性:信息与物质、能量不同，同一信息在同一时间可被多个主体共有，信息能无限地进行复制和传递，不因使用而有损耗<br>
●快速增长性:随着社会的发展，信息在快速增长!(信息爆炸)</p>
<h2 id="什么是信息处理">什么是信息处理?</h2>
<p>信息处理指的是与下列内容相关的行为和活动:<br>
●信息的收集(如信息的感知、测量、获取、输入等)<br>
●信息的传递(如邮寄、出版、电报、电话、广播等)<br>
●信息的加工(如分类、计算、分析、转换、检索等)<br>
●信息的存储(如书写、摄影、录音、录像等)<br>
●信息的施用(如控制、显示、指挥等)</p>
<h2 id="人工进行信息处理的过程">人工进行信息处理的过程</h2>
<p>导入（神经网络）--》思维器官（加工/记忆信息）--》导出神经网络（传递信息）--》外部世界（信源/信速）--》效应器官（施用信息）感觉器官（获取信息）--》</p>
<p>人工信息处理的不足</p>
<ul>
<li>算不快</li>
<li>记不住</li>
<li>传不远</li>
<li>看听不清</li>
</ul>
<h2 id="什么是信息技术">什么是信息技术?</h2>
<p>信息技术（Information Technology简称IT)指的是用来扩展人们信息器官功能、协助人们更有效地进行信息处理的一门技术。内容包括:<br>
●扩展神经系统功能<strong>通信技术</strong><br>
●扩展大脑功能的<strong>计算与存储技术</strong><br>
●扩展神经系统功能的<strong>通信技术</strong><br>
●扩展感觉器官功能的<strong>感测（获取）技术</strong><br>
●外部世界事物<br>
●扩展效应器官功能的<strong>控制与是示技术</strong></p>
<h2 id="现代信息技术有什么特征">现代信息技术有什么特征?</h2>
<p>三大特征:</p>
<ul>
<li>采用微电子和光电子器件</li>
<li><strong>以数字技术（计算机）为基础</strong></li>
<li><strong>以计算机及其软件技术为核心</strong></li>
</ul>
<p>核心技术：</p>
<ul>
<li>计算机、软件、集成电路、通信、广播、互联网、自动控制、机器人等</li>
</ul>
<h2 id="科技进步对人类社会发展的影响">科技进步对人类社会发展的影响</h2>
<p>在历史长河中，一些科学发现和技术发明曾经引发了一个国家或民族的跨越式发展和变革,进而导致了人类生活方式或国家的根本性变化<br>
<strong>蒸汽机的发明引发了第一次工业革命(从英国开始)</strong><br>
●蒸汽机的发明，在很短时间内，改变了整个世界的面貌(马克思)<br>
<strong>电动机和发电机的发明引发了第二次工业革命</strong><br>
●电动机和发电机先后发明使电气化与工业化实现了有机结合，以美国为代表的工业化国家利用这一结合取得了快速的发展，实现了百年的持续发展<br>
<strong>信息技术引发了第三次工业革命</strong><br>
●20世纪70年代后,美国面临以日本为代表的工业化国家激烈竞争，甚至出现了短暂的被动局面。从20世纪80年代起,美国利用信息技术实现了近30年的持续快速发展,保持了综合实力的领先地位</p>
<h2 id="什么是信息化">什么是信息化</h2>
<p>2000年“全球信息社会冲绳宪章”明确提出:</p>
<ul>
<li>信息技术是影响21世纪发展的最强劲的驱动力量·信息化一由信息技术驱动的经济和社会的变革</li>
<li>信息化的本质是利用信息技术帮助社会个人和群体有效利用知识和新思想，从而能建成充分发挥人的潜力，实现其抱负的信息社会。</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>[</mo><mn>5</mn><msub><mo>]</mo><mrow><mi mathvariant="normal">补</mi><mi mathvariant="normal">码</mi></mrow></msub><mo>=</mo><mn>000001012</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>[</mo><mn>2</mn><msub><mo>]</mo><mrow><mi mathvariant="normal">补</mi><mi mathvariant="normal">码</mi></mrow></msub><mo>=</mo><mn>00000010</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>[</mo><mo>−</mo><mn>2</mn><msub><mo>]</mo><mrow><mi mathvariant="normal">补</mi><mi mathvariant="normal">码</mi></mrow></msub><mo>=</mo><mn>11111110</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mo>[</mo><mo>−</mo><mn>5</mn><msub><mo>]</mo><mrow><mi mathvariant="normal">补</mi><mi mathvariant="normal">码</mi></mrow></msub><mo>=</mo><mn>11111011</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
[5]_{补码} = 000001012 \\
[2]_{补码} = 00000010 \\
[-2]_{补码} = 11111110 \\
[-5]_{补码} =11111011
\end{aligned}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6em;vertical-align:-2.7500000000000004em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord">5</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">2</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord">−</span><span class="mord">2</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">[</span><span class="mord">−</span><span class="mord">5</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:-0.15em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord cjk_fallback mtight">补</span><span class="mord cjk_fallback mtight">码</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">0</span><span class="mord">1</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C# 类的学习]]></title>
        <id>http://qiyunkong.github.io/post/c-lei-de-xue-xi/</id>
        <link href="http://qiyunkong.github.io/post/c-lei-de-xue-xi/">
        </link>
        <updated>2020-12-17T04:40:02.000Z</updated>
        <summary type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
<!-- more -->
<h2 id="定义一个类">定义一个类</h2>
<pre><code class="language-c#">//定义一个人员类
class Person {
 	//编写类的成员
}
</code></pre>
<h3 id="类的成员和修饰词">类的成员和修饰词</h3>
<blockquote>
<p>类的成员有:字段，属性，方法，构造，索引器，</p>
<p>类的修饰有:公有，私有（保护），抽象</p>
</blockquote>
<h4 id="类的成员-字段">类的成员-字段</h4>
<pre><code class="language-c#">//定义一个人员类
class Person {
    //字段
    private  string name;
    private int age;
    private string sex;
    private static bool isMorf;
}
</code></pre>
<h4 id="类的成员-属性">类的成员-属性</h4>
<pre><code class="language-c#">//定义一个人员类
class Person {
    //字段(上述代码)
     
    //Name
    public string Name {
        get { return name; }
        set { name = value; }
    }

    //Age
    public int Age {
        set { age = value; }
        private get { return age; }

    }

    //性别
    public string Sex{
        set { sex = value; }
        get { return sex; }
    }       

    //静态属性不能使用非静态字段
    public static bool Morf {
        get { return isMorf; }
        set { isMorf = value; }
    }
    
    
}
</code></pre>
<h4 id="类的成员-方法">类的成员-方法</h4>
<pre><code class="language-c#">class Person {
    //方法
    public void Print() {
        Console.WriteLine(&quot;none params&quot;);
    }
}
</code></pre>
<h4 id="类的成员-索引器">类的成员-索引器</h4>
<pre><code class="language-c#">class Person {
    public int this[int index]
    {
        get { return intarray[index]; }
        set { intarray[index] = value; }
    }
}
</code></pre>
<h4 id="类的成员-构造">类的成员-构造</h4>
<pre><code class="language-c#">class Person {
 	//实例构造方法
    public Person()
    {
        Console.WriteLine(&quot;实例构造函数调用了&quot;);
    }
    //静态构造方法
    static Person()
    {
        Console.WriteLine(&quot;静态构造函数调用了&quot;);
    }
    //析构构造函数
    ~Person()
    {
        Console.WriteLine(&quot;析构构造函数被调用&quot;);
    }

}
</code></pre>
<h2 id="类的使用">类的使用</h2>
<pre><code class="language-c#">static void Main(string[] args)
{
    //构造函数 实例化对象
    Person p = new Person();
    
    //属性赋值
    p.Name = &quot;Tony&quot;;
    p.Age = 12;
    p.Sex = &quot;f&quot;;

    //静态的方法只能类调用
    Person.Morf = false;

    //调用方法 
    p.Print();
    
    //索引器使用
    p[0] = 12;
    p[1] = 13;
    p[2] = 14;
    Console.WriteLine(&quot; p[0]=&quot; +  p[0]);
    Console.WriteLine(&quot; p[1]=&quot; +  p[1]);
    Console.WriteLine(&quot; p[2]=&quot; +  p[2]);


}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C# 基本语法]]></title>
        <id>http://qiyunkong.github.io/post/c-ji-ben-yu-fa/</id>
        <link href="http://qiyunkong.github.io/post/c-ji-ben-yu-fa/">
        </link>
        <updated>2020-12-17T04:39:03.000Z</updated>
        <summary type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
<!-- more -->
<h2 id="类型转换">类型转换</h2>
<pre><code class="language-c#">
static void Main(string[] args)
 {
     //使用强制类型转换
     int num = 100;
     float f = (float)num;
     Console.WriteLine(&quot;f is {0}&quot;,f);


     //使用System.Convert类中的静态方法
     num = 110;
     string str = System.Convert.ToString(num);
     Console.WriteLine(str);


     //使用.net框架提供Parse方法
     str = &quot;200&quot;;
     f = float.Parse(str);
     Console.WriteLine(str);


     Console.WriteLine(&quot;Hello World!&quot;);
     Console.ReadKey();
 }
</code></pre>
<h2 id="认识枚举">认识枚举</h2>
<pre><code class="language-c#"> 
//定义枚举
enum Gender {
 Female,
 Male = 5,
 Node,
}

class Program
{
    static void Main(string[] args)
    {
        //枚举默认 从0开始标号
        Console.WriteLine((int)Gender.Female);
        Console.WriteLine((int)Gender.Male);
        Console.WriteLine((int)Gender.Node);
        Console.ReadKey();            
    }
}
</code></pre>
<h2 id="认识结构体">认识结构体</h2>
<pre><code class="language-c#">
//定义结构体
public struct StructDemo {
    public float x;
    public float y;

    public StructDemo(float xPos, float yPos)
    {
    x = xPos;
    y = yPos;
    }
}

class Program
{
    static void Main(string[] args)
    {
    //使用结构体 必须进行初始化不然会报错
    StructDemo s1;
    s1.x = 10f;
    s1.y = 20f;
    Console.WriteLine(s1.x + &quot; &quot; + s1.y);


    //new 使用结构体
    StructDemo s2 = new StructDemo();
    Console.WriteLine(s2.x + &quot; &quot; + s2.y);

    //new 使用机构体
    StructDemo s3 = new StructDemo(10f,10f);
    Console.WriteLine(s3.x + &quot; &quot; + s3.y);


    Console.WriteLine(&quot;Hello World!&quot;);
    Console.ReadKey();
    }
}
</code></pre>
<h2 id="认识数组">认识数组</h2>
<pre><code class="language-c#">
static void Main(string[] args)
{
    //1.声明 一个长度为5并名字为a的数组
    int[] a = new int[5];
    a[0] = 1;
    a[1] = 2;
    Console.WriteLine(a[0] + &quot; &quot; + a[3]);

    //2.声明一个数组
    int[] numArray = new int[] { 1, 2, 3, 4, 5 };
    string str = &quot;&quot;;
    for (int i = 0; i &lt; numArray.Length; i++)
    {
    str += numArray[i];

    }
    Console.WriteLine(&quot;我是for循环=&quot;+str);

    //3.声明一个数组
    int[] numArray2 = { 1, 2, 3, 4, 5, };
    str = &quot;&quot;;
    foreach (var item in numArray2)
    {
    str += item;
    }
    Console.WriteLine(&quot;我是foreach循环=&quot;+str);
    Console.ReadKey();
}
</code></pre>
<h2 id="综合测试">综合测试</h2>
<p>定义枚举</p>
<pre><code class="language-c#">
enum EnuDemo {
    Boy,
    Girl,
    Man = 5,
    Female
}
</code></pre>
<p>定义结构体</p>
<pre><code class="language-c#">
public struct Complex {
    public int real;
    public int imageinary;

    public Complex(int _real, int _imaginary)
    {
    this.real = _real;
    this.imageinary = _imaginary;
    }

    //运算符重载
    public static Complex operator +(Complex c1, Complex c2)
    {
    Complex result = new Complex();
    result.real = c1.real + c2.real;
    result.imageinary = c1.imageinary + c2.imageinary;
    return result;

    }

    //override 重写修饰符 
    public override string ToString()
    {
    return string.Format(&quot;我是加完后的real:{0}&quot;+ &quot;  &quot;+ &quot;我是加完后的imageinary:{1}&quot;, real, imageinary);
    }

}
</code></pre>
<p>定义方法</p>
<pre><code class="language-c#">
public static void SwitchMethod(EnuDemo item)
{
    switch (item) {
    case EnuDemo.Boy:
    Console.WriteLine(&quot;It's boy&quot;);
    break;
    case EnuDemo.Girl:
    Console.WriteLine(&quot;It's girl&quot;);
    break;
    case EnuDemo.Man:
    Console.WriteLine(&quot;It's man&quot;);
    break;
    case EnuDemo.Female:
    Console.WriteLine(&quot;It's Female&quot;);
    break;
    default:
    Console.WriteLine(&quot;Invaild type&quot;);
    break;
    }
}
</code></pre>
<p>Main方法运行</p>
<pre><code class="language-c#">

static void Main(string[] args)
{
    //使用运算符重载
    Complex c1 = new Complex(1, 2);
    Complex c2 = new Complex(3, 4);
    Complex sum = c1 + c2;
    Console.WriteLine(sum);


    //if-else 分支语句
    bool isFlay = true;
    int num = 1;
    if (isFlay)
    {
    Console.WriteLine(&quot;It's true&quot;);
    }
    else {
    Console.WriteLine(&quot;It's false&quot;);
    }

    if (isFlay &amp;&amp; num &gt; 2)
    {
    Console.WriteLine(&quot;It's true,It's num &gt; 2&quot;);

    }
    else if (isFlay &amp;&amp; num &lt; 2)
    {
    Console.WriteLine(&quot;It's true,It's num &lt; 2&quot;);
    }
    else {
    Console.WriteLine(&quot;Other&quot;);
    }

    //SwitchMethod
    Program.SwitchMethod(EnuDemo.Boy);
    Console.ReadKey();
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C# 第一个程序]]></title>
        <id>http://qiyunkong.github.io/post/c-di-yi-ge-cheng-xu/</id>
        <link href="http://qiyunkong.github.io/post/c-di-yi-ge-cheng-xu/">
        </link>
        <updated>2020-12-17T01:45:49.000Z</updated>
        <summary type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
]]></summary>
        <content type="html"><![CDATA[<p>✍️   C# 是一个现代的、通用的、面向对象的编程语言，它是由微软（Microsoft）开发的，由 Ecma 和 ISO 核准认可的。</p>
<!-- more -->
<pre><code class="language-C#">
//引入命名空间
using System; 
//命名空间
namespace ConsoleApp1
{
    //命名类
    class Program
    {
        public static void Method() {
            Console.WriteLine(&quot;I am qiyunkong&quot;);
        }

        //Main 方法是程序的入口点
        static void Main(string[] args)
        {
            Program.Method();
            Console.WriteLine(&quot;Hello World!&quot;);
        }
    }
}
</code></pre>
<p>小结</p>
<ul>
<li>调试 F2</li>
<li>Main方法</li>
</ul>
<h2 id="特点">特点</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>http://qiyunkong.github.io/post/hello-gridea/</id>
        <link href="http://qiyunkong.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 *<em>Gridea</em></p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 *<em>Gridea</em></p>
<!-- more -->
<ul>
<li>！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</li>
</ul>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>